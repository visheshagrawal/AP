package com.company;
import java.util.*;

interface User{
    public void addReward();
    public void giveDetails();
}
class Merchant implements User{
    private String name;
    private String address;
    private float contribution=0;
    private int slots=10;
    ArrayList<Item> merchant_items = new ArrayList<>();

    public int getSlots() {
        return slots;
    }

    public void setSots(int slots){
        this.slots=slots;
    }

    public void setItem_number(int item_number) {
        this.slots = item_number;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public float getContribution() {
        return contribution;
    }

    public void setContribution(float contribution) {
        this.contribution = contribution;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void printItem(Item i1){
        System.out.print(i1.getUid()+" ");
        System.out.print(i1.getName()+" ");
        System.out.print(i1.getPrice()+" ");
        System.out.print(i1.getQuantity()+" ");
        if(i1.getOffer()==""){
        System.out.print("None ");}
        else{
            System.out.print(i1.getOffer()+" ");
        }
        System.out.print(i1.getCategory()+" ");

    }
    @Override
    public void giveDetails(){
        System.out.println(this.getName());
        System.out.println(this.getAddress());
        System.out.println(this.getContribution());
    }

    public void addItem(){
        if(this.getSlots()>=this.merchant_items.size()) {
            Scanner scan = new Scanner(System.in);
            System.out.println("Enter item details");
            System.out.println("item name: ");
            String itemName = scan.next();
            System.out.println("item price: ");
            float itemPrice = scan.nextFloat();
            System.out.println("item quantity: ");
            int itemQuantity = scan.nextInt();
            System.out.println("item category: ");
            String itemCategory = scan.next();

            Item i1 = new Item();
            i1.setName(itemName);
            i1.setCategory(itemCategory);
            i1.setPrice(itemPrice);
            i1.setQuantity(itemQuantity);

            this.merchant_items.add(i1);
            System.out.print(i1.getUid() + " ");
            System.out.print(i1.getName() + " ");
            System.out.print(i1.getPrice() + " ");
            System.out.print(i1.getQuantity() + " ");
            System.out.print("None ");
            System.out.println(i1.getCategory() + " ");
        }
        else{
            System.out.println("Slots are full  no more items can be added");
        }
    }



    public void addOffer(){
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter code for item(item id)");
        for(int i=0;i<this.merchant_items.size();i++) {
            this.printItem(this.merchant_items.get(i));
            System.out.println();
        }
            int z = scan.nextInt();
        System.out.println("Choose offer");
        System.out.println("1) buy one get one");
        System.out.println("2) 25% off");
        int p = scan.nextInt();
        for(int i=0;i<this.merchant_items.size();i++){
         if(this.merchant_items.get(i).getUid()==z){
                if(p==1){
                    this.merchant_items.get(i).setOffer("buy one get one");
                }
                else if(p==2){
                    this.merchant_items.get(i).setOffer("25% off");
                }
                this.printItem(this.merchant_items.get(i));
         }
        }
    }
    @Override
    public void addReward(){
        if(this.getContribution()>=100){
            this.setContribution(this.getContribution()-100);
            this.setSots(this.getSlots()+1);
        }

        System.out.println("Slots rewarded = "+(this.getSlots()-10));


    }

    public void editItem(){
        Scanner scan = new Scanner(System.in);
        System.out.println("Choose item by code ");
        for(int i=0;i<this.merchant_items.size();i++) {
            this.printItem(this.merchant_items.get(i));
            System.out.println();
        }
        int z = scan.nextInt();
        System.out.println("Enter edit details");
        System.out.println("item price ");
        float price = scan.nextFloat();
        System.out.println("item quantity");
        int p = scan.nextInt();
        for(int i=0;i<this.merchant_items.size();i++){
            if(this.merchant_items.get(i).getUid()==z){
                this.merchant_items.get(i).setQuantity(p);
                this.merchant_items.get(i).setPrice(price);
                this.printItem(this.merchant_items.get(i));
            }
        }
    }



}

class Customer implements User{
    private String name;
    private String address;
    private float balance=100;
    private float reward=0;
    private int purchases=0;
    private int totalpurchases=0;
    ArrayList<Item> cart= new ArrayList<Item>();
    ArrayList<Item> recent_history= new ArrayList<Item>();

    public int getTotalpurchases() {
        return totalpurchases;
    }

    public void setTotalpurchases(int totalpurchases) {
        this.totalpurchases = totalpurchases;
    }

    public int getPurchases(){
        return purchases;
    }

    public void setPurchases(int z){
        purchases=z;
    }


    public float getBalance() {
        return balance;
    }

    public void setBalance(float balance) {
        this.balance = balance;
    }

    public float getReward() {
        return reward;
    }

    public void setReward(float reward) {
        this.reward = reward;

    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public void giveDetails(){
        System.out.println(this.getName());
        System.out.println(this.getAddress());
        System.out.println(this.getTotalpurchases());
    }

    @Override
    public void addReward(){
        if(this.getPurchases()>=5){
            this.setPurchases(this.getPurchases()-5);
            this.setReward(this.getReward()+10);
        }
    }




}

class Item{
    static int count=1;
    private int uid=count++ ;
    private String name;
    private float price;
    private int quantity;
    private String category;
    private String offer="";
    private String merchant_name;

    public String getMerchant_name() {
        return merchant_name;
    }

    public void setMerchant_name(String merchant_name) {
        this.merchant_name = merchant_name;
    }

    public int getUid() {
        return uid;
    }

    public void setUid(int uid) {
        this.uid = uid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public float getPrice() {
        return price;
    }

    public void setPrice(float price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getOffer() {
        return offer;
    }

    public void setOffer(String offer) {
        this.offer = offer;
    }


}



public class Main {

    public static HashMap<Integer,Merchant> merchant_map;
    public static HashMap<Integer,Customer> customer_map;
    public static HashMap<Integer,Item> item_map;
    public static float company_balance;


    public static void addtoCart(int a,int code,int q){
        int w=-1;
        int i,j=0;
        for(i=1;i<=5;i++){
            for(j=0;j<merchant_map.get(i).merchant_items.size();j++){
                if(merchant_map.get(i).merchant_items.get(j).getUid()==code) {
//                            merchant_map.get(i).printItem(merchant_map.get(i).merchant_items.get(j));
//                            System.out.println();
                    w++;
                    break;
                }
            }
            if(w==0){
                break;
            }
        }
        Item i1 = new Item();
        i1.setUid(merchant_map.get(i).merchant_items.get(j).getUid());
        i1.setPrice(merchant_map.get(i).merchant_items.get(j).getPrice());
        i1.setQuantity(q);
        i1.setName(merchant_map.get(i).merchant_items.get(j).getName());
        i1.setMerchant_name(merchant_map.get(i).merchant_items.get(j).getMerchant_name());
        i1.setOffer(merchant_map.get(i).merchant_items.get(j).getOffer());
        i1.setCategory(merchant_map.get(i).merchant_items.get(j).getCategory());
        customer_map.get(a).cart.add(i1);
    }

    public static void addtoHistory(int a,int code,int q){
        int w=-1;
        int i,j=0;
        for(i=1;i<=5;i++){
            for(j=0;j<merchant_map.get(i).merchant_items.size();j++){
                if(merchant_map.get(i).merchant_items.get(j).getUid()==code) {
//                            merchant_map.get(i).printItem(merchant_map.get(i).merchant_items.get(j));
//                            System.out.println();
                    w++;
                    break;
                }
            }
            if(w==0){
                break;
            }
        }
        Item i1 = new Item();
        //i1.setUid(merchant_map.get(i).merchant_items.get(j).getUid());
        i1.setPrice(merchant_map.get(i).merchant_items.get(j).getPrice());
        i1.setQuantity(q);
        i1.setName(merchant_map.get(i).merchant_items.get(j).getName());
        i1.setOffer(merchant_map.get(i).merchant_items.get(j).getOffer());
        //i1.setCategory(merchant_map.get(i).merchant_items.get(j).getCategory());
        i1.setMerchant_name(merchant_map.get(i).getName());
        if(customer_map.get(a).recent_history.size()>=10){
            customer_map.get(a).recent_history.remove(0);
        }
        customer_map.get(a).recent_history.add(i1);
    }


    public static void buyItem(int a,int code,int q){
        int w=-1;
        int i,j=0;
        for(i=1;i<=5;i++){
            for(j=0;j<merchant_map.get(i).merchant_items.size();j++){
                if(merchant_map.get(i).merchant_items.get(j).getUid()==code) {
//                            merchant_map.get(i).printItem(merchant_map.get(i).merchant_items.get(j));
//                            System.out.println();
                    w++;
                    break;
                }
            }
            if(w==0){
                break;
            }
        }

        if(merchant_map.get(i).merchant_items.get(j).getOffer().equals("buy one get one")){
            if( merchant_map.get(i).merchant_items.get(j).getQuantity()>=2*q && merchant_map.get(i).merchant_items.get(j).getPrice()*q<=customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                if(customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q<0){
                    customer_map.get(a).setReward(customer_map.get(a).getReward()+customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q);
                    customer_map.get(a).setBalance(0);
                }
                else{
                    customer_map.get(a).setBalance(customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q);
                }
                merchant_map.get(i).merchant_items.get(j).setQuantity(merchant_map.get(i).merchant_items.get(j).getQuantity()-2*q);
                customer_map.get(a).setPurchases(customer_map.get(a).getPurchases()+1);
                customer_map.get(a).setTotalpurchases(customer_map.get(a).getTotalpurchases()+1);
                company_balance+=0.01*merchant_map.get(i).merchant_items.get(j).getPrice()*q;
                merchant_map.get(i).setContribution((float) (merchant_map.get(i).getContribution()+merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.005));

//                System.out.println(merchant_map.get(i).getContribution());
//                System.out.println(company_balance);
//                System.out.println(customer_map.get(a).getBalance());
//                System.out.println(customer_map.get(a).getReward());
                //addtoHistory(a,code,2*q);
            }
            else{
                if(merchant_map.get(i).merchant_items.get(j).getQuantity()<2*q) {
                    System.out.println("Error: Item out of stock , Please try again  ");
                    customer_menu(a);
                }
                else if (merchant_map.get(i).merchant_items.get(j).getPrice()*q>customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                    System.out.println("Error:You don't have enough money in your account , Please try again");
                    customer_menu(a);
                }
            }
        }

        else if(merchant_map.get(i).merchant_items.get(j).getOffer().equals("25% off")){
            if( merchant_map.get(i).merchant_items.get(j).getQuantity()>=q && merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75<=customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                if(customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75<0){
                    customer_map.get(a).setReward((float) (customer_map.get(a).getReward()+customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75));
                    customer_map.get(a).setBalance(0);
                }
                else{
                    customer_map.get(a).setBalance((float) (customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75));
                }
                merchant_map.get(i).merchant_items.get(j).setQuantity(merchant_map.get(i).merchant_items.get(j).getQuantity()-q);
                customer_map.get(a).setPurchases(customer_map.get(a).getPurchases()+1);
                customer_map.get(a).setTotalpurchases(customer_map.get(a).getTotalpurchases()+1);
                company_balance+=0.01*merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75;
                merchant_map.get(i).setContribution((float) (merchant_map.get(i).getContribution()+merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.005));
                //addtoHistory(a,code,q);
            }
            else{
                if(merchant_map.get(i).merchant_items.get(j).getQuantity()<q) {
                    System.out.println("Error: Item quantity is not available right now , Please try again  ");
                    customer_menu(a);
                }
                else if (merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.75>customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                    System.out.println("Error:You don't have enough money in your account , Please try again");
                    customer_menu(a);
                }
            }
        }

        else{
            if( merchant_map.get(i).merchant_items.get(j).getQuantity()>=q && merchant_map.get(i).merchant_items.get(j).getPrice()*q<=customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                if(customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q<0){
                    customer_map.get(a).setReward(customer_map.get(a).getReward()+customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q);
                    customer_map.get(a).setBalance(0);
                }
                else{
                    customer_map.get(a).setBalance(customer_map.get(a).getBalance()-merchant_map.get(i).merchant_items.get(j).getPrice()*q);
                }
                merchant_map.get(i).merchant_items.get(j).setQuantity(merchant_map.get(i).merchant_items.get(j).getQuantity()-q);
                customer_map.get(a).setPurchases(customer_map.get(a).getPurchases()+1);
                customer_map.get(a).setTotalpurchases(customer_map.get(a).getTotalpurchases()+1);
                company_balance+=0.01*merchant_map.get(i).merchant_items.get(j).getPrice()*q;
                merchant_map.get(i).setContribution((float) (merchant_map.get(i).getContribution()+merchant_map.get(i).merchant_items.get(j).getPrice()*q*0.005));
                //addtoHistory(a,code,q);
            }
            else{
                if(merchant_map.get(i).merchant_items.get(j).getQuantity()<q) {
                    System.out.println("Error: Item quantity is not available right now , Please try again  ");
                    customer_menu(a);
                }
                else if (merchant_map.get(i).merchant_items.get(j).getPrice()*q>customer_map.get(a).getBalance()+customer_map.get(a).getReward()){
                    System.out.println("Error:You don't have enough money in your account , Please try again");
                    customer_menu(a);
                }
            }
        }
        System.out.println("Item successfully bought");
        //customer_map.get(a).setPurchases(customer_map.get(a).getPurchases()+1);
//        System.out.println(merchant_map.get(i).getContribution());
//        System.out.println(company_balance);
//        System.out.println(customer_map.get(a).getBalance());
//        System.out.println(customer_map.get(a).getReward());

        addtoHistory(a,code,q);
        //customer_menu(a);




    }


    public static void main_menu(){

        Scanner scan = new Scanner(System.in);
        System.out.println("Welcome to Mercury");
        System.out.println("1) Enter as Merchant");
        System.out.println("2) Enter as Customer");
        System.out.println("3) See user details");
        System.out.println("4) Company account balance ");
        System.out.println("5) Exit");
        int x = scan.nextInt();
        if(x==1){
            System.out.println("Choose Merchant");
            System.out.println("1) Jack");
            System.out.println("2) John");
            System.out.println("3) James");
            System.out.println("4) Jeff");
            System.out.println("5) Joseph");
            int a = scan.nextInt();
            merchant_menu(a);
        }
        else if(x==2){
            System.out.println("Choose Customer");
            System.out.println("1) Mike");
            System.out.println("2) Harvey");
            System.out.println("3) Jessica");
            System.out.println("4) Louis");
            System.out.println("5) Daniel");
            int a = scan.nextInt();
            customer_menu(a);

        }
        else if(x==3){
            System.out.println("Merchant");
            System.out.println("1) Jack ");System.out.println("2) John ");System.out.println("3) James ");System.out.println("4) Jeff ");System.out.println("5) Joseph ");
            System.out.println("Customer");
            System.out.println("1) Mike ");System.out.println("2) Harvey ");System.out.println("3) Jessica ");System.out.println("4) Louis ");System.out.println("5) Daniel");

            String user = scan.next();
            int num = scan.nextInt();
            if(user.equals("M")) {
                merchant_map.get(num).giveDetails();
//                System.out.println(merchant_map.get(num).getName());
//                System.out.println(merchant_map.get(num).getAddress());
//                System.out.println(merchant_map.get(num).getContribution());
                main_menu();
            }

            else if(user.equals("C")){
                customer_map.get(num).giveDetails();
//                System.out.println(customer_map.get(num).getName());
//                System.out.println(customer_map.get(num).getAddress());
//                System.out.println(customer_map.get(num).getPurchases());
                main_menu();
            }


        }
        else if(x==4){

            System.out.println("Company balance is "+company_balance);
            main_menu();


        }
        else if(x==5){
            System.exit(0);
        }
    }


    public static void merchant_menu(int a){
        Scanner scan = new Scanner(System.in);
        String g = merchant_map.get(a).getName();
        System.out.println("Welcome "+g);
        System.out.println("Merchant Menu");
        System.out.println("1) Add Item");
        System.out.println("2) Edit Item");
        System.out.println("3) Search by category");
        System.out.println("4) Add offer");
        System.out.println("5) Rewards Won");
        System.out.println("6) Exit");

        int y = scan.nextInt();

        if(y==1){
                merchant_map.get(a).addItem();
//            for(int i=0;i<merchant_map.get(a).merchant_items.size();i++){
//                System.out.println(merchant_map.get(a).merchant_items.get(i));
//            }

                merchant_menu(a);

        }
        else if(y==2){
            merchant_map.get(a).editItem();
            System.out.println();
            merchant_menu(a);

        }
        else if(y==3){

            ArrayList<String> list = new ArrayList<String>();
            for(int i=1;i<=5;i++){
                for(int j=0;j<merchant_map.get(i).merchant_items.size();j++){
                    if(!list.contains(merchant_map.get(i).merchant_items.get(j).getCategory())){
                        list.add(merchant_map.get(i).merchant_items.get(j).getCategory());
                    }

                }


            }

            for(int i=0;i<list.size();i++){
                int c =list.indexOf(list.get(i));
                System.out.println(c+1+") " +list.get(i));

            }
            int cat = scan.nextInt();
            for(int i=1;i<=5;i++){
                for(int j=0;j<merchant_map.get(i).merchant_items.size();j++)
                if(merchant_map.get(i).merchant_items.get(j).getCategory().equals(list.get(cat-1))){
                    merchant_map.get(i).printItem(merchant_map.get(i).merchant_items.get(j));
                    System.out.println();
                }
            }
            merchant_menu(a);





        }
        else if(y==4){

            merchant_map.get(a).addOffer();
            System.out.println();
            merchant_menu(a);


        }
        else if(y==5){

            merchant_map.get(a).addReward();

        }

        else if(y==6){
            main_menu();
        }

    }

    public static void customer_menu(int a){
        Scanner scan = new Scanner(System.in);
        String g = customer_map.get(a).getName();
        System.out.println("Welcome "+g);
        System.out.println("Customer Menu");
        System.out.println("1) Search item");
        System.out.println("2) Checkout Cart");
        System.out.println("3) Reward Won");
        System.out.println("4) Print Latest Orders");
        System.out.println("5) Exit");
        int y = scan.nextInt();
        if(y==1){
            System.out.println("Choose a category");
            ArrayList<String> list = new ArrayList<String>();
            for(int i=1;i<=5;i++){
                for(int j=0;j<merchant_map.get(i).merchant_items.size();j++){
                    if(!list.contains(merchant_map.get(i).merchant_items.get(j).getCategory())){
                        list.add(merchant_map.get(i).merchant_items.get(j).getCategory());
                    }
                }
            }

            for(int i=0;i<list.size();i++){
                int c =list.indexOf(list.get(i));
                System.out.println(c+1+") " +list.get(i));

            }
            System.out.println("choose item by code");
            int cat = scan.nextInt();
            for(int i=1;i<=5;i++){
                for(int j=0;j<merchant_map.get(i).merchant_items.size();j++)
                    if(merchant_map.get(i).merchant_items.get(j).getCategory().equals(list.get(cat-1))){
                        merchant_map.get(i).printItem(merchant_map.get(i).merchant_items.get(j));
                        System.out.println();
                    }
            }

            System.out.println("Enter item code");
            int code = scan.nextInt();
            System.out.println("Enter item quantity");
            int q = scan.nextInt();
            System.out.println("Choose method of transaction");
            System.out.println("1) Buy Item");
            System.out.println("2) Add item to cart");
            System.out.println("3) Exit");
            int method = scan.nextInt();
            if (method==1) {// BUY
                //CHECK whether Merchant has enough quantity
                // CHECK WHETHER CUSTOMER HAS ENOUGH MONEY
                customer_map.get(a).addReward();

                buyItem(a, code, q);

                customer_menu(a);
            }
            else if(method==2){

                addtoCart(a,code,q);
//                for(int i=0;i<customer_map.get(a).cart.size();i++){
//                    //System.out.println(customer_map.get(a).cart.get(i).getName()+" "+customer_map.get(a).cart.get(i).getMerchant_name());
//                    //System.out.println();
//                }

                customer_menu(a);




            }

            else if(method==3){ //EXIT
                customer_menu(a);
            }



        }
        else if(y==2){
            //Item i_current ;
            int size=customer_map.get(a).cart.size();
            for(int i=0;i<size;i++){
                //System.out.println("Testing quantity "+ size);
                buyItem(a,customer_map.get(a).cart.get(0).getUid(),customer_map.get(a).cart.get(0).getQuantity());
                customer_map.get(a).cart.remove(0);
            }
            customer_menu(a);


        }
        else if(y==3){
            System.out.println("Reward won = "+customer_map.get(a).getReward());
            customer_menu(a);

        }
        else if(y==4) {
            float v1=1;
            int v2=1;

            for(int i=0;i<customer_map.get(a).recent_history.size();i++){
                if(customer_map.get(a).recent_history.get(i).getOffer()=="25% off"){
                        v1= (float) (v1-0.25);
                }
                else if(customer_map.get(a).recent_history.get(i).getOffer()=="buy one get one"){
                        v2=2;
                }
                //System.out.println(customer_map.get(a).recent_history.get(i).getOffer());

                System.out.println("Bought item "+customer_map.get(a).recent_history.get(i).getName()+" quanity: "+customer_map.get(a).recent_history.get(i).getQuantity()*v2+" for Rs. "+customer_map.get(a).recent_history.get(i).getQuantity()*customer_map.get(a).recent_history.get(i).getPrice()*v1+" from Merchant "+customer_map.get(a).recent_history.get(i).getMerchant_name() );
            v1=1;v2=1;
            }

            customer_menu(a);

        }

        else if(y==5){
            main_menu();
        }
        else{
            main_menu();
        }
    }



    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        merchant_map = new HashMap<Integer, Merchant>();
        customer_map = new HashMap<Integer, Customer>();

        Merchant m1=new Merchant();Merchant m2=new Merchant();Merchant m3=new Merchant();Merchant m4=new Merchant();Merchant m5=new Merchant();
        m1.setName("Jack");m2.setName("John");m3.setName("James");m4.setName("Jeff");m5.setName("Joseph");
        m1.setAddress("New York");m2.setAddress("London");m3.setAddress("Milan");m4.setAddress("Shanghai");m5.setAddress("Bombay");

        merchant_map.put(1,m1);merchant_map.put(2,m2);merchant_map.put(3,m3);merchant_map.put(4,m4);merchant_map.put(5,m5);


        //System.out.println(merchant_map);
        Customer c1=new Customer();Customer c2=new Customer();Customer c3=new Customer();Customer c4=new Customer();Customer c5=new Customer();
        c1.setName("Mike");c2.setName("Harvey");c3.setName("Jessica");c4.setName("Louis");c5.setName("Daniel");
        c1.setAddress("Brooklyn");c2.setAddress("Manhattan");c3.setAddress("Chicago");c4.setAddress("Queens");c5.setAddress("New Jersey");

        customer_map.put(1,c1);customer_map.put(2,c2);customer_map.put(3,c3);customer_map.put(4,c4);customer_map.put(5,c5);
        //System.out.println(customer_map.get(1).getName()+" "+customer_map.get(1).getAddress());
        main_menu();
        //System.out.println(m1.getSlots());

    }
}
